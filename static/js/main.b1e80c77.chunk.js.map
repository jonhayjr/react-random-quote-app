{"version":3,"sources":["components/Header.js","components/QuoteCard.js","components/Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","QuoteCard","getRandomQuote","quote","isLoading","getRandomColor","Card","Body","content","author","Buttons","Button","variant","size","block","onClick","App","useState","setQuote","randomColor","setRandomColor","setLoading","axios","get","then","res","quotes","data","results","randomQuote","getRandomNumber","length","max","Math","floor","random","randomNumber1","randomNumber2","randomNumber3","useEffect","containerStyle","backgroundColor","Container","fluid","style","Row","Col","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAQeA,EARA,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACb,OACI,iCACI,oBAAIC,UAAU,YAAd,SAA2BD,O,QCkBxBE,EAnBG,SAAC,GAAuD,EAAtDC,eAAuD,IAAvCC,EAAsC,EAAtCA,MAAuBC,GAAe,EAA/BC,eAA+B,EAAfD,WACvD,OACA,8BACI,cAACE,EAAA,EAAD,CAAMN,UAAU,kBAAhB,SACI,cAACM,EAAA,EAAKC,KAAN,UACKH,EACD,mBAAGJ,UAAU,KAAb,yBAGA,gCACI,mBAAGA,UAAU,KAAb,SAAmBG,EAAMK,UACzB,oBAAGR,UAAU,KAAb,cAAoBG,EAAMM,oB,QCE/BC,EAbC,SAAC,GAA6C,IAA5CL,EAA2C,EAA3CA,eAAgBH,EAA2B,EAA3BA,eAAgBC,EAAW,EAAXA,MAC9C,OACI,gCACI,cAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKb,UAAU,oBAAoBc,OAAK,EAACC,QAAS,kBAAMb,EAAeC,IAAtG,8BAGA,cAACQ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,KAAKb,UAAU,yBAAyBc,OAAK,EAACC,QAAS,kBAAMV,KAA9F,kCC4DGW,EA1DH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOd,EAAP,KAAce,EAAd,KACA,EAAsCD,mBAAS,SAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOb,EAAP,KAAkBiB,EAAlB,KAGMnB,EAAiB,WAErBmB,GAAW,GACXC,IAAMC,IAAI,kCACPC,MAAK,SAAAC,GACJ,IAAMC,EAASD,EAAIE,KAAKC,QAElBC,EAAcH,EADCI,EAAgBJ,EAAOK,SAE5Cb,EAASW,GACTR,GAAW,OAKXS,EAAkB,SAACE,GAEvB,OADqBC,KAAKC,MAAMD,KAAKE,SAAWH,IAK5C3B,EAAiB,WACrB,IAAM+B,EAAgBN,EAAgB,KAChCO,EAAgBP,EAAgB,KAChCQ,EAAgBR,EAAgB,KAChCX,EAAW,cAAUiB,EAAV,aAA4BC,EAA5B,aAA8CC,EAA9C,KACjBlB,EAAeD,IAIjBoB,oBAAUrC,EAAgB,IAE1BqC,oBAAUlC,EAAgB,IAG1B,IAAMmC,EAAiB,CACrBC,gBAAiBtB,GAGnB,OACE,cAACuB,EAAA,EAAD,CAAWC,OAAK,EAAC3C,UAAU,yBAA0B4C,MAAOJ,EAA5D,SACE,cAACK,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAAC,EAAD,CAAQ9C,UAAU,OAAOD,MAAM,qBAC/B,cAAC,EAAD,CAAWI,MAAOA,EAAOD,eAAgBA,EAAgBG,eAAgBA,EAAgBD,UAAWA,IACpG,cAAC,EAAD,CAASD,MAAOA,EAAOD,eAAgBA,EAAgBG,eAAgBA,YCjDlE0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b1e80c77.chunk.js","sourcesContent":["const Header = ({title}) => {\n    return (\n        <header>\n            <h1 className='display-2'>{title}</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import {Card} from 'react-bootstrap';\n\nconst QuoteCard = ({getRandomQuote, quote, getRandomColor, isLoading}) => {\n    return (\n    <div>\n        <Card className='text-center p-5'>\n            <Card.Body>\n                {isLoading ?\n                <p className='h2'>Loading....</p>\n                :\n                (\n                <div>\n                    <p className='h2'>{quote.content}</p>\n                    <p className='h4'>-{quote.author}</p>\n                </div>)}\n            </Card.Body>\n        </Card>\n    </div>\n    )\n}\n\nexport default QuoteCard\n","import {Button} from 'react-bootstrap';\n\nconst Buttons = ({getRandomColor, getRandomQuote, quote}) => {\n    return (\n        <div>\n            <Button variant=\"primary\" size=\"lg\" className='w-25 mx-auto mt-5' block onClick={() => getRandomQuote(quote)}>\n                Get Random Quote\n            </Button>\n            <Button variant=\"secondary\" size=\"lg\" className='w-25 mx-auto mt-5 mb-5' block onClick={() => getRandomColor()}>\n                Get Random Color\n            </Button>\n        </div>\n    )\n}\n\nexport default Buttons\n","import {useState, useEffect} from 'react';\nimport {Container, Col, Row} from 'react-bootstrap';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//import components\nimport Header from './components/Header';\nimport QuoteCard from './components/QuoteCard';\nimport Buttons from './components/Buttons';\n\nconst App = () => {\n  //Declare State Hooks\n  const [quote, setQuote] = useState([]);\n  const [randomColor, setRandomColor] = useState('white');\n  const [isLoading, setLoading] = useState(true);\n\n  //Function to get random quote from quote API\n  const getRandomQuote = () => {\n    //Set loading state back to tru\n    setLoading(true)\n    axios.get('https://api.quotable.io/quotes')\n      .then(res => {\n        const quotes = res.data.results;\n        const randomNumber = getRandomNumber(quotes.length);\n        const randomQuote = quotes[randomNumber];\n        setQuote(randomQuote);\n        setLoading(false);\n      })\n  }\n\n  //Function to get random number\n  const getRandomNumber = (max) => {\n    const randomNumber = Math.floor(Math.random() * max);\n    return randomNumber;\n  }\n\n  //Function to get random rgb color value\n  const getRandomColor = () => {\n    const randomNumber1 = getRandomNumber(256);\n    const randomNumber2 = getRandomNumber(256);\n    const randomNumber3 = getRandomNumber(256);\n    const randomColor = `rgb(${randomNumber1}, ${randomNumber2}, ${randomNumber3})`;\n    setRandomColor(randomColor);\n  }\n\n  //Use Effect hooks to load random quote and random color on page load\n  useEffect(getRandomQuote, []);\n\n  useEffect(getRandomColor, []);\n\n  //Declare background color style based on random color value\n  const containerStyle = {\n    backgroundColor: randomColor\n  }\n\n  return (\n    <Container fluid className='text-center w-100 mt-5'  style={containerStyle}>\n      <Row>\n        <Col>\n          <Header className='mt-5' title='Random Quote App'/>\n          <QuoteCard quote={quote} getRandomQuote={getRandomQuote} getRandomColor={getRandomColor} isLoading={isLoading}/>\n          <Buttons quote={quote} getRandomQuote={getRandomQuote} getRandomColor={getRandomColor}  />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport './normalize.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}